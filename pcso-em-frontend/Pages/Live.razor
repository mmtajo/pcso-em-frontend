@page "/live"
@implements IAsyncDisposable
@using Microsoft.AspNetCore.SignalR.Client


@if (messages != null)
{
    @foreach (var message in messages)
    {
        <MudCard>
            <MudCardContent Class="d-flex flex-grow-1 gap-4" Style="align-items: center;">
                @if(message.name == "BARBS")
                {
                    <MudCardMedia Image="images/barbs.jpg" style="width:50px; height:50px; border-radius:25px; border:1px solid #c3baba"/>
                } else if(message.name == "JEM")
                {
                    <MudCardMedia Image="images/sample2.jpg" style="width:50px; height:50px; border-radius:25px; border:1px solid #c3baba"/>
                } else if(message.name == "EM")
                {
                    <MudCardMedia Image="images/em.jpg" style="width:50px; height:50px; border-radius:25px; border:1px solid #c3baba"/>
                } else if(message.name == "JOSEPH")
                {
                    <MudCardMedia Image="images/sample3.jpg" style="width:50px; height:50px; border-radius:25px; border:1px solid #c3baba"/>
                }
                <MudText Class="d-flex py-8" Typo="Typo.body1">@message.name</MudText>
                <MudText Class="d-flex py-8" Typo="Typo.body2">@message.message</MudText>
            </MudCardContent>
        </MudCard>
        <br />
    }
}

<MudTextField @bind-Value="name" Label="Name" Variant="Variant.Outlined"></MudTextField>
<MudTextField @bind-Value="message" Label="Message" Variant="Variant.Outlined"></MudTextField>
<br />
<MudButton Variant="Variant.Filled"
            EndIcon="@Icons.Material.Filled.Send"
            OnClick="Send"
            Color="Color.Primary">Send</MudButton>

@code {
    private HubConnection? hubConnection;
    private List<Message> messages = new List<Message>();
    private string? name;
    private string? message;

    private string? reqURL;

    protected override async Task OnInitializedAsync()
    {
        reqURL = "https://pcso-em-backend.azurewebsites.net/chat";
        hubConnection = new HubConnectionBuilder()
        .WithUrl(reqURL)
        .Build();


        hubConnection.On<string, string>("Receive", (name, message) => {
            //var encodedMsg = $"{name} {message}";
            Message msg = new Message();
            msg.name = name;
            msg.message = message;
            messages.Add(msg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("Broadcast", name, message);
            message = null;
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public class Message
    {
        public string? name { get; set; }
        public string? message { get; set; }
        
    }
}
