@page "/todo"
@inject IJSRuntime JS
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net.Http.Headers

@if(todoList != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Message</th>
                <th>Created</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var todo in todoList)
            {
                <tr>
                    <td>@todo.name</td>
                    <td>@todo.message</td>
                    <td>@todo.created</td>
                </tr>
            }
        </tbody>
    </table>
}

<MudTextField @bind-Value="name" Label="Name" Variant="Variant.Outlined"></MudTextField>
<MudTextField @bind-Value="message" Label="Message" Variant="Variant.Outlined"></MudTextField>

<br /><br />
 <MudButton Variant="Variant.Filled" 
            EndIcon="@Icons.Material.Filled.Send" 
            OnClick="AddTodo"
            Color="Color.Primary">Add</MudButton>

 <MudButton Variant="Variant.Filled" 
            EndIcon="@Icons.Material.Filled.Send" 
            OnClick="InvokeJavaScript"
            Color="Color.Info">Update App</MudButton>

<MudButton Variant="Variant.Filled" 
            EndIcon="@Icons.Material.Filled.Send"
            OnClick="DeleteAll"
            Color="Color.Error">Delete List</MudButton>


@code {
    private int count = 0;
    private string? jsonData;
    private List<ToDoItem> todoList;

    private string name;
    private string message;

    private async void DeleteAll()
    {
        HttpClient httpClient = new HttpClient();
        await httpClient.DeleteAsync("https://pcso-em-backend.azurewebsites.net/todoitems");
        await GetListAsync();
        StateHasChanged();
    }

    private async void AddTodo()
    {
        count++;
        HttpClient httpClient = new HttpClient();
        ToDoItem toDoItemPost = new ToDoItem
            {
                message = message,
                name = name,
                created = DateTime.Now
            };
        string myContent = JsonSerializer.Serialize(toDoItemPost);
        byte[] buffer = System.Text.Encoding.UTF8.GetBytes(myContent);
        ByteArrayContent byteContent = new ByteArrayContent(buffer);
        byteContent.Headers.ContentType = new MediaTypeHeaderValue("application/json");

        await httpClient.PostAsync("https://pcso-em-backend.azurewebsites.net/todoitems", byteContent);

        jsonData = await httpClient.GetStringAsync("https://pcso-em-backend.azurewebsites.net/todoitems");

        await GetListAsync();

        StateHasChanged();
    }

    private async Task GetListAsync()
    {
        HttpClient httpClient = new HttpClient();
        jsonData = await httpClient.GetStringAsync("https://pcso-em-backend.azurewebsites.net/todoitems");

        todoList = JsonSerializer.Deserialize<List<ToDoItem>>(jsonData);
        message = null;
    }

    private async void InvokeJavaScript()
    {
        await JS.InvokeVoidAsync("DeleteCache");
        await JS.InvokeVoidAsync("HelloAlert");

    }

    public class ToDoItem
    {
        public int id { get; set; }
        public string name { get; set; }
        public bool isComplete { get; set; }
        public string message { get; set; }
        public DateTime created { get; set; }
    }

}
